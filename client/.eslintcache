[{"C:\\Users\\Public\\Bootcamp\\dubcity-app\\client\\src\\index.js":"1","C:\\Users\\Public\\Bootcamp\\dubcity-app\\client\\src\\App.js":"2","C:\\Users\\Public\\Bootcamp\\dubcity-app\\client\\src\\components\\Navbar.js":"3","C:\\Users\\Public\\Bootcamp\\dubcity-app\\client\\src\\components\\SignupForm.js":"4","C:\\Users\\Public\\Bootcamp\\dubcity-app\\client\\src\\components\\LoginForm.js":"5","C:\\Users\\Public\\Bootcamp\\dubcity-app\\client\\src\\utils\\auth.js":"6","C:\\Users\\Public\\Bootcamp\\dubcity-app\\client\\src\\utils\\mutations.js":"7","C:\\Users\\Public\\Bootcamp\\dubcity-app\\client\\src\\pages\\About.js":"8"},{"size":223,"mtime":1657373448213,"results":"9","hashOfConfig":"10"},{"size":1692,"mtime":1657480357782,"results":"11","hashOfConfig":"10"},{"size":2406,"mtime":1657480643963,"results":"12","hashOfConfig":"10"},{"size":4983,"mtime":1657373448212,"results":"13","hashOfConfig":"10"},{"size":2784,"mtime":1657151446494,"results":"14","hashOfConfig":"10"},{"size":1234,"mtime":1657151446497,"results":"15","hashOfConfig":"10"},{"size":1529,"mtime":1657305765591,"results":"16","hashOfConfig":"10"},{"size":478,"mtime":1657480956690,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"yz77su",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Public\\Bootcamp\\dubcity-app\\client\\src\\index.js",[],["36","37"],"C:\\Users\\Public\\Bootcamp\\dubcity-app\\client\\src\\App.js",[],"C:\\Users\\Public\\Bootcamp\\dubcity-app\\client\\src\\components\\Navbar.js",[],"C:\\Users\\Public\\Bootcamp\\dubcity-app\\client\\src\\components\\SignupForm.js",["38","39","40","41"],"import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport alienAvatar from '../assets/avatar/alien-avatar.jpg';\nimport bearAvatar from '../assets/avatar/bear-avatar.png';\nimport doggoAvatar from '../assets/avatar/doggo-avatar.png';\nimport ghostAvatar from '../assets/avatar/ghost-avatar.png';\nimport gorillaAvatar from '../assets/avatar/gorilla-avatar.jpg';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\n\nimport Auth from '../utils/auth';\n\n// const avatarArray = [alienAvatar, bearAvatar, doggoAvatar, ghostAvatar, gorillaAvatar];\n// const gamesArray = ['Onward', 'Contractors', 'Pavlov']\n// const Select = () => {\n//   const [option] = useState([\n//     {\n\n//     }\n//   ])\n// }\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: '',\n    email: '',\n    password: ''\n  });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n      console.log(data);\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: ''\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"avatar\">Select An Avatar</Form.Label>\n          <Form.Control as=\"select\" aria-label=\"Default select example\">\n            <option>Open this select menu</option>\n            <option value=\"1\">\n              {alienAvatar}\n            </option>\n            {/* <option value=\"2\">\n              <img src={bearAvatar} alt=\"bear avatar\"></img>\n            </option>\n            <option value=\"3\">\n              <img src={doggoAvatar} alt=\"doggo avatar\"></img>\n            </option>\n            <option value=\"4\">\n              <img src={ghostAvatar} alt=\"ghost avatar\"></img>\n            </option>\n            <option value=\"5\">\n              <img src={gorillaAvatar} alt=\"gorilla avatar\"></img>\n            </option> */}\n          </Form.Control>\n        </Form.Group>\n\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","C:\\Users\\Public\\Bootcamp\\dubcity-app\\client\\src\\components\\LoginForm.js",[],"C:\\Users\\Public\\Bootcamp\\dubcity-app\\client\\src\\utils\\auth.js",[],"C:\\Users\\Public\\Bootcamp\\dubcity-app\\client\\src\\utils\\mutations.js",[],"C:\\Users\\Public\\Bootcamp\\dubcity-app\\client\\src\\pages\\About.js",["42","43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":5,"column":8,"nodeType":"50","messageId":"51","endLine":5,"endColumn":18},{"ruleId":"48","severity":1,"message":"52","line":6,"column":8,"nodeType":"50","messageId":"51","endLine":6,"endColumn":19},{"ruleId":"48","severity":1,"message":"53","line":7,"column":8,"nodeType":"50","messageId":"51","endLine":7,"endColumn":19},{"ruleId":"48","severity":1,"message":"54","line":8,"column":8,"nodeType":"50","messageId":"51","endLine":8,"endColumn":21},{"ruleId":"48","severity":1,"message":"55","line":6,"column":5,"nodeType":"50","messageId":"51","endLine":6,"endColumn":16},{"ruleId":"48","severity":1,"message":"56","line":7,"column":5,"nodeType":"50","messageId":"51","endLine":7,"endColumn":9},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'bearAvatar' is defined but never used.","Identifier","unusedVar","'doggoAvatar' is defined but never used.","'ghostAvatar' is defined but never used.","'gorillaAvatar' is defined but never used.","'CardColumns' is defined but never used.","'Card' is defined but never used.","no-global-assign","no-unsafe-negation"]