[{"C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\index.js":"1","C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\App.js":"2","C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\pages\\About.js":"3","C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\pages\\UserPage.js":"4","C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\components\\Navbar.js":"5","C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\components\\Events.js":"6","C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\pages\\Homepage.js":"7","C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\pages\\EventForm.js":"8","C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\components\\Footer.js":"9","C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\utils\\auth.js":"10","C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\utils\\mutations.js":"11","C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\components\\LoginForm.js":"12","C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\components\\Calendar.js":"13","C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\components\\SignupForm.js":"14","C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\utils\\queries.js":"15"},{"size":343,"mtime":1657649266333,"results":"16","hashOfConfig":"17"},{"size":2197,"mtime":1657591259126,"results":"18","hashOfConfig":"17"},{"size":1774,"mtime":1657562104057,"results":"19","hashOfConfig":"17"},{"size":1712,"mtime":1657571520174,"results":"20","hashOfConfig":"17"},{"size":2933,"mtime":1657590837286,"results":"21","hashOfConfig":"17"},{"size":286,"mtime":1657649731549,"results":"22","hashOfConfig":"17"},{"size":198,"mtime":1657649875383,"results":"23","hashOfConfig":"17"},{"size":6061,"mtime":1657569714734,"results":"24","hashOfConfig":"17"},{"size":1132,"mtime":1657561791620,"results":"25","hashOfConfig":"17"},{"size":1234,"mtime":1657068681095,"results":"26","hashOfConfig":"17"},{"size":1529,"mtime":1657305720285,"results":"27","hashOfConfig":"17"},{"size":2784,"mtime":1657068681062,"results":"28","hashOfConfig":"17"},{"size":1105,"mtime":1657657305906,"results":"29","hashOfConfig":"17"},{"size":7566,"mtime":1657648475198,"results":"30","hashOfConfig":"17"},{"size":354,"mtime":1657305720286,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qfi3wn",{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\index.js",[],"C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\App.js",[],["66","67"],"C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\pages\\About.js",["68","69"],"import React from 'react';\n\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card\n} from 'react-bootstrap';\n\nconst About = () => {\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>About Us:</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <p> DubCity VR Tournaments is a new and growing community specializing in VR First Person Shooters. Established in 2022: We are a community driven platform - Run by the players, for the the players!\n          Currently we have over 500 members and growing everyday.\n        </p>\n        <p>\n          <strong>What we do:</strong><br/><br/>\n\n          Along with hosting a medium for VR FPS enthusiatst to meet, talk, and breathe in a non-toxic environment. We also host a multitude of tournaments based around healthy competition.\n          Currently we are hosting competitions for the following games:\n          1. Onward\n          2. Contractors\n          3. Pavlov\n          4. More to come ...\n        </p>\n        <p>\n          <strong>What is our aim:</strong><br/><br/>\n\n          We aim to establish ourselves as the #1 Brand for gaming events and tournaments. Also, we aim to grow larger in members to create a a healthy environment for players young and old.\n          Finally, we aim to publicize our efforts through live broadcasting of our events and tournaments.\n\n          How does that benefit you:\n\n          We are looking for sponsorship from companies we can stand behind. Given are members and desire to grow: We intend to promote ourselves and our sponsors through marketing\n          strategies implemented in ourcommunity servers and social media platform.\n        </p>\n      </Container>\n    </>\n  )\n\n}\n\nexport default About;","C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\pages\\UserPage.js",["70","71"],"import React from 'react';\r\nimport {\r\n    Jumbotron,\r\n    Container,\r\n    Button,\r\n} from 'react-bootstrap';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { QUERY_ME } from '../utils/queries';\r\nimport { REMOVE_USER } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst UserPage = () => {\r\n    const { loading, data } = useQuery(QUERY_ME);\r\n    const [removeUser, { error }] = useMutation(REMOVE_USER);\r\n\r\n    const userData = data?.me || {};\r\n\r\n    const handleDeleteUser = async (_id) => {\r\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n        if (!token) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const { data } = await removeUser({\r\n                variables: { _id },\r\n            });\r\n            removeUser(_id);\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    if (loading) {\r\n        return <h2>LOADING...</h2>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Jumbotron fluid>\r\n                <Container>\r\n                    <h1>{userData.username}</h1>\r\n                </Container>\r\n            </Jumbotron>\r\n            <Container>\r\n                <Container>\r\n                    <img\r\n                        src={userData.avatar}\r\n                        alt=''\r\n                    />\r\n                    <p>\r\n                        Games: {userData.games}\r\n                    </p>\r\n                </Container>\r\n                <Button\r\n                    onClick={() => handleDeleteUser(userData._id)}\r\n                >\r\n                    Delete My Account!\r\n                </Button>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserPage;","C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\components\\Navbar.js",[],"C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\components\\Events.js",["72","73"],"C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\pages\\Homepage.js",[],"C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\pages\\EventForm.js",[],"C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\components\\Footer.js",[],"C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\utils\\auth.js",[],"C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\utils\\mutations.js",[],"C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\components\\LoginForm.js",[],"C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\components\\Calendar.js",[],"C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\components\\SignupForm.js",["74"],"import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert, FormGroup, DropdownButton, Dropdown } from 'react-bootstrap'\nimport alienAvatar from '../assets/avatar/alien-avatar.jpg';\nimport bearAvatar from '../assets/avatar/bear-avatar.png';\nimport doggoAvatar from '../assets/avatar/doggo-avatar.png';\nimport ghostAvatar from '../assets/avatar/ghost-avatar.png';\nimport gorillaAvatar from '../assets/avatar/gorilla-avatar.jpg';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\n\nimport Auth from '../utils/auth';\nimport { FormRow } from 'react-bootstrap/Form';\n\n\nconst SignupForm = () => {\n  const gamesArray = [\n    'Onward',\n    'Contractors',\n    'Pavlov'\n  ];\n\n  // Create avatar path object\n  const avatarOpt = [\n    { value: alienAvatar, alt: 'Alien Avatar' },\n    { value: bearAvatar, alt: 'Bear Avatar' },\n    { value: doggoAvatar, alt: 'Doggo Avatar' },\n    { value: ghostAvatar, alt: 'Ghost Avatar' },\n    { value: gorillaAvatar, alt: 'Gorilla Avatar' }\n  ];\n\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: '',\n    email: '',\n    password: '',\n    avatar: ''\n  });\n\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n\n  const [selectedValue,setValue]=useState('');\n\n  // OnChange for avatar selector\n  const handleSelectChange = (event) =>{\n    console.log(event)\n    setValue(event)\n  }\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n      console.log(data);\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <FormGroup>\n          <DropdownButton \n            title=\"Select Avatar\"\n            id=\"bg-nested-dropdown\"  \n            onSelect={handleSelectChange}\n            value={userFormData.avatar = selectedValue}>\n\n              {avatarOpt.map(option => (\n                <Dropdown.Item \n                  key={option.value} \n                  eventKey={option.value}>\n                    <img \n                      src={option.value} \n                      alt={option.alt} \n                      className='avatarImage'/>\n                </Dropdown.Item>\n              ))}\n          </DropdownButton>\n        </FormGroup>\n\n        {/* <Form.Group>\n          <Form.Label htmlFor=\"avatarOptions\">Select an avatar</Form.Label>\n          {['radio'].map((type) => (\n            <div key={`default-${type}`} className=\"mb-3\">\n              <Form.Check\n                name=\"avatarOptions\"\n                type={type}\n                id={`default-${type}`}\n                label={<img src={alienAvatar} alt='alien' className='avatarImage'/>}\n                checked={true}\n              />\n              <Form.Check\n                name=\"avatarOptions\"\n                type={type}\n                id={`default-${type}`}\n                label={<img src={doggoAvatar} alt='doggo' className='avatarImage'/>}\n                //value=\"no\"\n                //checked={selected === \"no\"}\n              />\n              <Form.Check\n                name=\"avatarOptions\"\n                type={type}\n                id={`default-${type}`}\n                label={<img src={ghostAvatar} alt='ghost' className='avatarImage'/>}\n                //value=\"no\"\n                //checked={selected === \"no\"}\n              />\n              <Form.Check\n                name=\"avatarOptions\"\n                type={type}\n                id={`default-${type}`}\n                label={<img src={gorillaAvatar} alt='gorilla' className='avatarImage'/>}\n                //value=\"no\"\n                //checked={selected === \"no\"}\n              />\n              <Form.Check\n                name=\"avatarOptions\"\n                type={type}\n                id={`default-${type}`}\n                label={<img src={bearAvatar} alt='bear' className='avatarImage'/>}\n                //value=\"no\"\n                //checked={selected === \"no\"}\n              />\n            </div>\n\n          ))}\n        </Form.Group> */}\n\n        <Form.Group>\n          <Form.Label htmlFor=\"gameOptions\">Which games do you play?</Form.Label>\n          {['checkbox'].map((type) => (\n            <div key={`default-${type}`} className=\"mb-3\">\n              {gamesArray.map((game) => {\n                return (\n                  <Form.Check\n                    name=\"gameOptions\"\n                    key={`${game}`}\n                    type={type}\n                    className={`default-${type}`}\n                    label={`${game}`}\n                  />\n                )\n              })}\n            </div>\n          ))}\n        </Form.Group>\n\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;","C:\\Users\\mbean\\bootcamp-projects\\dubcity-app\\client\\src\\utils\\queries.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":6,"column":3,"nodeType":"81","messageId":"82","endLine":6,"endColumn":14},{"ruleId":"79","severity":1,"message":"83","line":7,"column":3,"nodeType":"81","messageId":"82","endLine":7,"endColumn":7},{"ruleId":"79","severity":1,"message":"84","line":15,"column":26,"nodeType":"81","messageId":"82","endLine":15,"endColumn":31},{"ruleId":"79","severity":1,"message":"85","line":27,"column":21,"nodeType":"81","messageId":"82","endLine":27,"endColumn":25},{"ruleId":"79","severity":1,"message":"86","line":1,"column":8,"nodeType":"81","messageId":"82","endLine":1,"endColumn":13},{"ruleId":"79","severity":1,"message":"87","line":8,"column":11,"nodeType":"81","messageId":"82","endLine":8,"endColumn":20},{"ruleId":"79","severity":1,"message":"88","line":14,"column":10,"nodeType":"81","messageId":"82","endLine":14,"endColumn":17},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'CardColumns' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","'error' is assigned a value but never used.","'data' is assigned a value but never used.","'React' is defined but never used.","'eventData' is assigned a value but never used.","'FormRow' is defined but never used.","no-global-assign","no-unsafe-negation"]